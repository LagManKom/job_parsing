'''
В формате каком нам будут данные отдавать - почти очевидно,что в виде некоего класса с данными о вакансиях
(в какой-то домашке попадался похожий пример со студентами разных профессий и скиллов)
Далее научимся список этих объектов по разному сортировать или искать (лямбдами или кому как больше нравится, тут помогут переписанные магические свойства больше меньше равно)
Далее нарожаем утилит работы с файлами - уметь писать в файл JSON, уметь его читать. А может и не только JSON (еще абстрактный класс возможен)
таким образом у нас появится инструмент работы с данными, штуки для наполнения данных из разных АПИ, работа с файлами
ну и остается общее тело - собственно некий интерфейс общения с пользователем мол что делаем - запрашиваем файлы, наполняем объекты, сортируем их, перезапрашиваем и т д... это уже привычная рутина =))
ну и тесты.'''
import os
# Выкачать данные.
# Положить все в экземпляры одного класса Vacancy
# Список передать объекту, который запишет все это в файл.
# Убедиться что тот же самый объект потом прочитает эти данные из файла

# асбтрактный класс-модели, принимает набор фильтров и возвращает данные из API в нужном формате
# два класса наследника для работы с апи (HH & SuperJob)
# список этих объектов по разному сортировать или искать
from abc import ABC, abstractmethod


class WorkingAPI(ABC):
    @abstractmethod
    def get_vacancies(self):
        pass

    def foo(self):
        pass


class HeadHunterAPI(WorkingAPI):

    def __init__(self, prof):
        self.prof = prof

    def get_vacancies(self):
        pass


class SuperJobAPI(WorkingAPI):

    api = os.getenv('SuperJobAPI')

    def get_vacancies(self):
        pass
